select *
from Customers
	where Sales > (select avg (sales) from Customers)
	order by sales desc



select *
from Customers c
join orders o
	on o.CustomerId= c.Id
	where c.Name = 'Kroger'




select City, sum(Sales), count(*) 'count'
	from customers
	group by City
	having sum (sales) > 600000 ;



declare @SatScore int = 1494;

select * 
from Student
where SAT>@SatScore
order by SAT desc



select *
	from student 
	where gpa < (select avg (gpa) from Student)
	order by gpa desc;

select *
	from student 
	where sat > (select avg(SAT)
	from Student)

****************************************************************************************************************************************************


CREATE DATABASE PRMS
GO
USE PRMS
GO
CREATE TABLE Users (
id int not null primary key identity(1,1),
Username varchar(30) not null Unique,
Password varchar(30) not null,
Firstname varchar(30) not null,
Lastname varchar(30) not null,
Phone varchar(12) null,
Email varchar(255)null,
IsReviewer int Default 0 not null,
isAdmin int Default 0 not null
)
GO
CREATE TABLE Vendors (
id int not null primary key identity(1,1),
Code varchar(30) not null Unique,
Name varchar(30) not null,
Address varchar(30) not null,
City varchar(30) not null,
State varchar(2) not null,
Zip varchar(5) not null,
Phone varchar(12) null,
Email varchar(255) null,
)
GO
CREATE TABLE Products (
id int not null primary key identity(1,1),
PartNbr varchar(30) not null Unique,
Name varchar(30) not null,
Price decimal (9,2) not null Default 0,
Unit varchar(30) not null Default 'Each',
PhotoPath varchar(255) null,
VendorId int not null Foreign Key references Vendors(Id),
)
GO
CREATE TABLE Requests (
id int not null primary key identity(1,1),
Description varchar(80) not null,
Justification varchar(80) not null,
RejectionReason varchar(80) null,
DeliveryMode varchar(20) not null, Default 'Pickup'
Status varchar(10) not null Default 'New',
Total decimal (11,2) not null Default 0,
UserId int not null Foreign Key references Users(Id)
)
GO
CREATE TABLE Requestlines (
id int not null primary key identity(1,1),
RequestId int not null Foreign Key references Requests(Id),
ProductId int not null Foreign Key references Products(Id),
Quantity int not null Default 1
)
GO

--Insert data here

INSERT USER (Username, Password, FirstName, Lastname, IsReviewer, IsAdmin)
	Values('sa','sa','Systems', 'Admin',1,1),
	Values('rv','rv','Systems', 'Reviewer',1,0),
	Values('us1','us1','Systems', 'User',0,0),
	Values('us2','us2','Systems', 'User',0,0),


	
INSERT USER (Username, Password, FirstName, Lastname, IsReviewer, IsAdmin)
	Values('sa','sa','Systems', 'Admin',1,1),
	Values('rv','rv','Systems', 'Reviewer',1,0),
	Values('us1','us1','Systems', 'User',0,0),
	Values('us2','us2','Systems', 'User',0,0),

	
INSERT USER (Username, Password, FirstName, Lastname, IsReviewer, IsAdmin)
	Values('sa','sa','Systems', 'Admin',1,1),
	Values('rv','rv','Systems', 'Reviewer',1,0),
	Values('us1','us1','Systems', 'User',0,0),
	Values('us2','us2','Systems', 'User',0,0),
***********************************************************************************************************************************
CREATE OR ALTER Procedure CalculateRequestTotal
    @RequestId int = NULL
AS
BEGIN
    -- Check for missing RequestId
    IF @RequestId is NULL
    BEGIN
        PRINT 'RequestId is required';
        RETURN -1;
    END
    -- Check the RequestId exists
    IF NOT Exists(SELECT 1 from Requests Where Id = @RequestId)
    BEGIN
        PRINT 'Request not found';
        RETURN -2;
    END
    --
    DECLARE @Total decimal(9,2);
    /*
    This puts the total calculated by the query
    into the variable called @Total
    */
    Select @Total = Sum(rl.quantity * p.price)
        from REquests r
        join Requestlines rl
            on rl.RequestId = r.Id
        join Products p
            on p.Id = rl.ProductId
        Where r.Id = @RequestId;
    -- Now update the request
    UPDATE Requests Set
        Total = @Total
        Where Id = @RequestId;
    Print 'Updated Successfully! Return code is 0';
    RETURN 0;
END
Go
EXEC CalculateRequestTotal @RequestId = 1;
Go
***********************************************************************************************


